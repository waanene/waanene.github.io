{"meta":{"title":"哇啊NeNe's blog","subtitle":"NeNe的笔记博客","description":"佛系web前端","author":"哇啊NeNe","url":"http://mcer.win"},"pages":[],"posts":[{"title":"Python装饰器函数初识","slug":"Python装饰器函数初识","date":"2018-07-04T04:19:14.000Z","updated":"2018-07-04T08:50:28.542Z","comments":true,"path":"2018/07/04/Python装饰器函数初识/","link":"","permalink":"http://mcer.win/2018/07/04/Python装饰器函数初识/","excerpt":"","text":"装饰器的形成过程：最简单的装饰器—有返回值的—有一个参数的—万能参数装饰器语法糖：@装饰器函数名 等价于 func = wrapper(func)装饰器的本质：闭包函数开发原则：开放封闭原则 开放：对扩展是开放的 封闭：对修改是封闭的 1234567891011121314151617181920212223242526import time@timer #语法糖 @装饰器函数名def func(a): #被装饰的函数 time.sleep(0.1) #让程序在执行到这个文职的时候停一会儿对应的时间 print(&apos;oheihei&quot;,a) return &apos;ehehe&apos;def timer(f): #装饰器函数 def run_time(*args,**kwargs): start = time.time() #开始时获取当前时间 ret = f(*args,**kwargs) #赋值被装饰的函数的返回值 end = time.time() #结束时获取当前时间 print(end - start) return ret return run_time #注意函数名不能加括号()，不然报错@timer #语法糖 @装饰器函数名def func1(a,b): #被装饰的函数 time.sleep(0.1) #让程序在执行到这个文职的时候停一会儿对应的时间 print(&apos;oheihei&quot;,a,b) return &apos;ehehe&apos;#func = timer(func) #上方语法糖的作用就是等同于此处代码 PS1ret = func(1,2,) #run_time()ret = func(1,b=3)print(ret) 装饰器的作用 — 不想修改函数的调用方式 但是还想在原来的函数前后添加功能timer就是一个装饰器函数，只是对一个函数 有一些装饰作用 装饰器的固定形式：12345678910111213def wrapper(f): #装饰器函数,f是被装饰的函数名，由上方&apos;PS1&apos;处解释关联关系 def run_time(*args,**kwargs): &quot;&quot;&quot;在被装饰函数之前要做的事情&quot;&quot;&quot; ret = f(*args,**kwargs) #赋值被装饰的函数的返回值 &quot;&quot;&quot;在被装饰函数之后要做的事情&quot;&quot;&quot; return ret return run_time #注意函数名不能加括号()，不然报错@wrapper #语法糖 @装饰器函数名def func1(a,b): #被装饰的函数 time.sleep(0.1) #让程序在执行到这个文职的时候停一会儿对应的时间 print(&apos;oheihei&quot;,a,b) return &apos;ehehe&apos; 固定模式默写：1234567891011def wrapper(func): #whoami def inner(*args,**kwargs): ret = func(*args,**kwargs) #被装饰的函数 return ret return inner@wrapper #whoami = wrapper(whoami)def whoami(): print(&quot;admin&quot;)ret = whoami() #inner Oldboy 9s day11","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"http://mcer.win/tags/Python/"}]},{"title":"Python之闭包","slug":"Python之闭包","date":"2018-07-03T13:21:20.000Z","updated":"2018-07-03T13:27:54.462Z","comments":true,"path":"2018/07/03/Python之闭包/","link":"","permalink":"http://mcer.win/2018/07/03/Python之闭包/","excerpt":"","text":"什么才是闭包：嵌套函数，并且行为构成内部函数调用外部函数的变量。 栗子：123456789def wtf(): a = 1 def whoami(): print(a) print(whoami.__closure__)wtf()","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"http://mcer.win/tags/Python/"}]},{"title":"HTML网页跳转标签的使用","slug":"HTML网页跳转标签的使用","date":"2018-07-01T13:44:03.000Z","updated":"2018-07-01T13:52:34.271Z","comments":true,"path":"2018/07/01/HTML网页跳转标签的使用/","link":"","permalink":"http://mcer.win/2018/07/01/HTML网页跳转标签的使用/","excerpt":"","text":"HTML网页跳转的实现例如：https:www.123456hd.com 网站首页的跳转效果 html文件头部 使用meta http-equiv属性就可以达到效果。 12&lt;!--2秒后跳转到指定网址，注意引号的使用--&gt;&lt;meta http-equiv=&quot;refresh&quot; content=&quot;2;URL=https://指定网址&quot;&gt; #refresh 为刷新跳转 #content 为倒计时","categories":[],"tags":[{"name":"html5","slug":"html5","permalink":"http://mcer.win/tags/html5/"},{"name":"web前端","slug":"web前端","permalink":"http://mcer.win/tags/web前端/"}]},{"title":" Ubuntu14.04修改ssh端口","slug":"Ubuntu14-04修改ssh端口","date":"2018-06-30T10:16:24.000Z","updated":"2018-06-30T10:23:44.266Z","comments":true,"path":"2018/06/30/Ubuntu14-04修改ssh端口/","link":"","permalink":"http://mcer.win/2018/06/30/Ubuntu14-04修改ssh端口/","excerpt":"","text":"Linux中SSH默认端口为22，为了安全考虑，我们有必要对22端口进行修改，现修改端口为60000；修改方法如下：在/etc/ssh/sshd_config中找到Port 22，将其修改为60000,或使用/usr/sbin/sshd -p 60000指定端口。 如果用户想让22和60000端口同时开放，只需在/etc/ssh/sshd_config增加一行内容如下：12345[root@localhost /]# vi /etc/ssh/sshd_configPort 22Port 60000保存并退出[root@localhost /]#service ssh restart","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://mcer.win/tags/Linux/"},{"name":"配置","slug":"配置","permalink":"http://mcer.win/tags/配置/"}]},{"title":"开博第二天小日记","slug":"开博第二天小日记","date":"2018-06-28T15:47:20.000Z","updated":"2018-06-28T15:52:00.449Z","comments":true,"path":"2018/06/28/开博第二天小日记/","link":"","permalink":"http://mcer.win/2018/06/28/开博第二天小日记/","excerpt":"","text":"老男孩9s看到day3明天继续看day4 JavaScript看到这里了https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434499190108eec0bdf14e704a09935cd112e501e31a000#0 然后晚上Ubuntu14.0服务器上线了 环境还需要慢慢配置python虚拟环境已经配置好了MySQL-server装好了没配置完 只能本地访问 抽空弄外连 睡觉睡觉 狗命要紧","categories":[],"tags":[{"name":"日记","slug":"日记","permalink":"http://mcer.win/tags/日记/"}]},{"title":"ubuntu14.04 下安装mysql","slug":"ubuntu14-04-下安装mysql","date":"2018-06-28T15:39:38.000Z","updated":"2018-06-28T15:45:48.959Z","comments":true,"path":"2018/06/28/ubuntu14-04-下安装mysql/","link":"","permalink":"http://mcer.win/2018/06/28/ubuntu14-04-下安装mysql/","excerpt":"","text":"1.1sudo apt-get install mysql-server 2.测试是否安装成功12ps aux |grep mysqlmysql -u root -p 3.允许远程访问设置12345678910111213141516# sudo service mysql stop# sudo vim /etc/mysql/my.conf# #注释 bind_address=127.0.0.1# 重启mysql： sudo service mysql restart# 登录mysql： mysql -u rot -p# 切换数据库 use mysql;# 允许现有用户的远程访问 update user set host=&apos;%&apos; where user=&apos;root&apos; and host =&apos;localhost&apos;;# 退出数据库，重启数据库 exit; sudo service mysql restart; 4.数据库文件的迁移1234567891011121314151617181920212223242526# sudo service mysql stop #迁移前必须停止mysql# 创建mysql 存放的目标文件夹 sudo /mnt/mysqldata# 修改所属用户和用户组 sudo chown -R mysql:mysql /mnt/mysqldata# 修改权限 sudo chmod -R 700 /mnt/mysqldata# 迁移文件 su root; cp -a /var/lib/mysql/* /mnt/mysqldata/# 修改配置文件 sudo vim /etc/mysql/my.conf# datadir = /mnt/mysqldata# 以上mysql 配置完毕，在ubuntu还有些敏感操作受到了 apparmor.d 的限制，mysql也受到了限制，# sudo vim /etc/apparmor.d/usr.sbin.mysqld···············# /var/lib/mysql/ r, # /var/lib/mysql/** rwk,···············# 重新启动apparmor 和mysql# sudo service apparmor reload# sudo service mysql start","categories":[],"tags":[{"name":"配置","slug":"配置","permalink":"http://mcer.win/tags/配置/"},{"name":"ubuntu","slug":"ubuntu","permalink":"http://mcer.win/tags/ubuntu/"},{"name":"mysql","slug":"mysql","permalink":"http://mcer.win/tags/mysql/"}]},{"title":"Ubuntu下virtualenv 的安装及使用","slug":"Ubuntu下virtualenv-的安装及使用","date":"2018-06-28T15:19:50.000Z","updated":"2018-06-28T15:45:53.956Z","comments":true,"path":"2018/06/28/Ubuntu下virtualenv-的安装及使用/","link":"","permalink":"http://mcer.win/2018/06/28/Ubuntu下virtualenv-的安装及使用/","excerpt":"","text":"首先，用pip安装virtualenv：1$ pip3 install virtualenv 然后，假定要开发一个新的项目，需要一套独立的Python运行环境，可以这么做： 第一步，创建目录： 12$ mkdir myproject$ cd myproject/ 第二步，创建一个独立的Python运行环境，命名为webpy3： 1234$ virtualenv --no-site-packages webpy3undefinedInstalling setuptools, pip, wheel...done. 命令virtualenv就可以创建一个独立的Python运行环境，我们还加上了参数–no-site-packages，这样，已经安装到系统Python环境中的所有第三方包都不会复制过来，这样，我们就得到了一个不带任何第三方包的“干净”的Python运行环境。 新建的Python环境被放到当前目录下的webpy3目录。有了webpy3这个Python环境，可以用source进入该环境：123$ cd webpy3/bin/~/webpy3/bin# source activate(webpy3) root@MyCloudServer:~/myproject/webpy3/bin# 退出当前的webpy3环境，使用deactivate命令 12(webpy3) root@MyCloudServer:~/myproject/webpy3/bin# deactivateroot@MyCloudServer:~/myproject/webpy3/bin#","categories":[],"tags":[{"name":"配置","slug":"配置","permalink":"http://mcer.win/tags/配置/"},{"name":"linux","slug":"linux","permalink":"http://mcer.win/tags/linux/"},{"name":"ubuntu","slug":"ubuntu","permalink":"http://mcer.win/tags/ubuntu/"}]},{"title":"Ubuntu14.04上安装pip的方法","slug":"Ubuntu14-04上安装pip的方法","date":"2018-06-28T15:00:36.000Z","updated":"2018-06-28T15:08:08.856Z","comments":true,"path":"2018/06/28/Ubuntu14-04上安装pip的方法/","link":"","permalink":"http://mcer.win/2018/06/28/Ubuntu14-04上安装pip的方法/","excerpt":"","text":"Ubuntu14.04上安装pip的方法 ①12wget https://bootstrap.pypa.io/get-pip.py --no-check-certificatesudo python get-pip.py PS：1234567891011121314151617root@ubt:~# pip Traceback (most recent call last): File &quot;/usr/bin/pip&quot;, line 9, in load_entry_point(&apos;pip==1.5.4&apos;, &apos;console_scripts&apos;, &apos;pip&apos;)() File &quot;/usr/lib/python2.7/dist-packages/pkg_resources.py&quot;, line 351, in load_entry_point return get_distribution(dist).load_entry_point(group, name) File &quot;/usr/lib/python2.7/dist-packages/pkg_resources.py&quot;, line 2363, in load_entry_point return ep.load() File &quot;/usr/lib/python2.7/dist-packages/pkg_resources.py&quot;, line 2088, in load entry = __import__(self.module_name, globals(),globals(), [&apos;__name__&apos;]) File &quot;/usr/lib/python2.7/dist-packages/pip/__init__.py&quot;, line 11, in from pip.vcs import git, mercurial, subversion, bazaar # noqa File &quot;/usr/lib/python2.7/dist-packages/pip/vcs/mercurial.py&quot;, line 9, in from pip.download import path_to_url File &quot;/usr/lib/python2.7/dist-packages/pip/download.py&quot;, line 25, in from requests.compat import IncompleteReadImportError: cannot import name IncompleteRead 这是因为通过apt-get安装的pip版本太老了，老的pip版本依赖requests.compat.IncompleteRead，而在2.4.0版本的requests中已经移除了 requests.compat.IncompleteRead，解决方法是先卸载pip（命令为sudo apt-get remove python-pip），然后再用上面①的方法重新安装。 百度索得","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://mcer.win/tags/Linux/"},{"name":"Ubuntu","slug":"Ubuntu","permalink":"http://mcer.win/tags/Ubuntu/"},{"name":"配置","slug":"配置","permalink":"http://mcer.win/tags/配置/"}]},{"title":"Python--format的三种玩法","slug":"Python-format的三种玩法","date":"2018-06-28T08:20:43.000Z","updated":"2018-06-28T08:47:50.659Z","comments":true,"path":"2018/06/28/Python-format的三种玩法/","link":"","permalink":"http://mcer.win/2018/06/28/Python-format的三种玩法/","excerpt":"","text":"字符串str中的format()，用于格式化输出类似%s、%d 三种玩法： 123456789101112s = &apos;我叫&#123;&#125;，今年&#123;&#125;，爱好&#123;&#125;，再说一下我叫&#123;&#125;&apos;.format(&apos;NeNe&apos;,18,&apos;girl&apos;,&apos;NeNe&apos;)print(s)name = input(&apos;请输入名字：&apos;)s = &apos;我叫&#123;0&#125;，今年&#123;1&#125;，爱好&#123;2&#125;，再说一下我叫&#123;0&#125;&apos;.format(NeNe,18,&apos;girl&apos;)print(s)name = input(&apos;请输入名字：&apos;)age = input(&apos;请输入年龄：&apos;)hobby = input(&apos;请输入爱好：&apos;)s = &apos;我叫&#123;name&#125;，今年&#123;age&#125;，爱好&#123;hobby&#125;，再说一下我叫&#123;name&#125;&apos;.format(age=age,name=name,hobby=hobby)print(s) 来自老男孩9期day3 02视频","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"http://mcer.win/tags/Python/"}]},{"title":"NeNe的日记","slug":"NeNe的日记","date":"2018-06-27T15:05:35.000Z","updated":"2018-06-28T08:47:47.941Z","comments":true,"path":"2018/06/27/NeNe的日记/","link":"","permalink":"http://mcer.win/2018/06/27/NeNe的日记/","excerpt":"","text":"总结一下： 首先折腾了两天 个人博客终于上线了。hexo博客系统+GitHub托管好处：静态，意味着安全，无需考虑数据库环境的部署不需要数据库也就轻便了很多，只要本地写好博客推到GitHub上就可以了 也是比较稳的了就是不知道以后文章多了 推送的时候不会太大导致降低效率 先用用看吧。 觉得可以再搞一个Linux服务器再搭个博客上去 同步推送两个域名 就当备用也行。顺便练手hexo+server的部署过程以上为YY 抽空再搞搞。····································另外每次git bash下12$ hexo d#推送之后老需要手动重新填写设置里面的域名 导致十分麻烦 12$ hexo g#生产静态文件 解决方法就是在本地网站根目录下新建一个名为‘CNAME’的文件 里面写上需要解析的域名即可，然后把‘CNAME’文件复制到 “\\public\\” 目录下面，然后再执行$ hexo d就可以了 ······································以上为博客搭建过程中后面碰到的问题 今天从新开始看老男孩的python教程具体资源为：老男孩全栈9期 已有1-9部分链接: https://pan.baidu.com/s/1_TPZasQUQgm8puZA0m-Hgw 密码: z3g1 睡前看了廖雪峰的JavaScript教程目测体感还不错明天就继续看啦看到这里过了： https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/00143449917624134f5c4695b524e81a581ab5a222b05ec000","categories":[],"tags":[{"name":"日记","slug":"日记","permalink":"http://mcer.win/tags/日记/"},{"name":"计划","slug":"计划","permalink":"http://mcer.win/tags/计划/"}]},{"title":"python django web模块编程中的疑虑","slug":"python-django-web模块编程中的疑虑","date":"2018-06-27T07:39:29.000Z","updated":"2018-06-28T08:50:52.860Z","comments":true,"path":"2018/06/27/python-django-web模块编程中的疑虑/","link":"","permalink":"http://mcer.win/2018/06/27/python-django-web模块编程中的疑虑/","excerpt":"","text":"教程中的网页功能 列如：用户交易功能是在IDE中将某个单独功能 具体化成一个模块来写 1234567form xxx import xxxclass Xxxx(): xxx = xxx() aaa = aaa() .. ... 类似上面这样 的class类模块 最后将其串联调用整合到相关网页中 成为当前网页的一部分功能模块 应该是这样理解吧 还不知道咋去串联调用。。。","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"http://mcer.win/tags/Python/"},{"name":"Django","slug":"Django","permalink":"http://mcer.win/tags/Django/"}]},{"title":"初步学习计划","slug":"初步学习计划","date":"2018-06-27T06:07:37.000Z","updated":"2018-06-27T06:44:05.091Z","comments":true,"path":"2018/06/27/初步学习计划/","link":"","permalink":"http://mcer.win/2018/06/27/初步学习计划/","excerpt":"","text":"学习计划 方向：web前端内容： 1、HTML5/CSS3/JavaScript 2、Angular.js/Vue.js/React/Node.js 3、Python3/Django/ 4、其它杂项另行记载 过程： 上面的①与③每天夜里看相关知识 ②白天看，抽空阅读任一一项框架，每项阅读半小时， 疑问一律都留到晚上，实操也留夜里。 关于python，以python为中心 重点学习，时间占比大，累了就换HTML相关内容继续学习 做好每天的学习笔记，睡前做好总结。 制定相关第二天的学习内容。 学习计划大体围绕以上规则实施。 还有相关工具的熟悉 VScode、Pycharm、Hexo、GitHub等先写这么多吧 想不出来了。","categories":[],"tags":[{"name":"计划","slug":"计划","permalink":"http://mcer.win/tags/计划/"}]},{"title":"Bootstrap模板样式网站","slug":"Bootstrap模板样式网站","date":"2018-06-27T04:37:45.000Z","updated":"2018-06-27T04:41:15.254Z","comments":true,"path":"2018/06/27/Bootstrap模板样式网站/","link":"","permalink":"http://mcer.win/2018/06/27/Bootstrap模板样式网站/","excerpt":"","text":"Bootstrap模板：https://html5up.net/这个网站提供了免费的响应式模板，觉得还可以。","categories":[],"tags":[{"name":"网页收藏","slug":"网页收藏","permalink":"http://mcer.win/tags/网页收藏/"}]},{"title":"配置SSH key","slug":"配置SSH-key","date":"2018-06-27T04:36:45.000Z","updated":"2018-06-28T08:49:29.209Z","comments":true,"path":"2018/06/27/配置SSH-key/","link":"","permalink":"http://mcer.win/2018/06/27/配置SSH-key/","excerpt":"","text":"git Bash 下执行1234ssh-keygen -t rsa -C &quot;·········@qq.com&quot;ssh -T git@github.com # 注意邮箱地址不用改git config --global user.name &quot;········&quot;// 你的github用户名，非昵称git config --global user.email &quot;········@qq.com&quot;// 填写你的github注册邮箱","categories":[],"tags":[{"name":"配置","slug":"配置","permalink":"http://mcer.win/tags/配置/"}]},{"title":"热到听般禅梵唱妙音","slug":"热到听般禅梵唱妙音","date":"2018-06-27T04:03:38.000Z","updated":"2018-06-27T05:04:16.861Z","comments":true,"path":"2018/06/27/热到听般禅梵唱妙音/","link":"","permalink":"http://mcer.win/2018/06/27/热到听般禅梵唱妙音/","excerpt":"","text":"","categories":[],"tags":[{"name":"闲","slug":"闲","permalink":"http://mcer.win/tags/闲/"}]}]}